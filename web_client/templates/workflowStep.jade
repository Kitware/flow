- var color;
- if (step.visualization) {
-     color = 'lightgreen';
- } else if (step.isOutput || step.isInput) {
-     color = 'lightblue';
- } else {
-     color = 'whitesmoke';
- }
- var isTask = !step.visualization && !step.isOutput && !step.isInput;
- var editClass = isTask ? 'refresh-step' : '';
- var editCursor = isTask ? 'pointer' : '';
- var editIcon = isTask ? '\u27f3' : '';
- var portOffset = 20;

// visibility="hidden",

g.step(transform="translate(#{step.x},#{step.y})")
    rect.step-box(
        width=150,
        height=100,
        rx=10,
        ry=10,
        fill=color,
        stroke="#333",
        stroke-width="2"
    )
    text.step-name(
        x=75,
        y=50,
        fill="#333",
        text-anchor="middle",
        alignment-baseline="central",
        style="user-select:none;-webkit-user-select:none;pointer-events:none"
    )= step.name
    if edit
        text.delete-step(
            width=10,
            height=10,
            x=135,
            y=15,
            fill="crimson",
            visibility="hidden",
            style="cursor:pointer"
        ) X
        text.edit-step(
            width=10,
            height=10,
            x=105,
            y=15,
            fill="black",
            visibility="hidden",
            style="cursor:pointer"
        )= '\u270e'
        text(
            width=10,
            height=10,
            x=10,
            y=15,
            class=editClass,
            visibility="hidden",
            style="cursor:#{editCursor}"
        )= editIcon
    g
        for input, index in step.task.inputs
            path.input-line(
                d="M 0 " + step.task.inputScale(index) + "l " + -portOffset + " 0"
                stroke="#333",
                stroke-width=2
            )
    g
        for input, index in step.task.inputs
            path.input(
                d=portShape(input.type, -portOffset, step.task.inputScale(index))
                data-toggle="tooltip",
                data-placement="top",
                title=input.name + " [" + input.type + "]",
                fill="whitesmoke",
                stroke="#333",
                stroke-width=2
            )
    g
        for output, index in step.task.outputs
            path.output-line(
                d="M 150 " + step.task.outputScale(index) + "l " + portOffset + " 0"
                stroke="#333",
                stroke-width=2
            )
    g
        for output, index in step.task.outputs
            path.output(
                d=portShape(output.type, 150 + portOffset, step.task.outputScale(index))
                data-toggle="tooltip",
                data-placement="top",
                title=output.name + " [" + output.type + "]",
                fill="whitesmoke",
                stroke="#333",
                stroke-width=2
            )
